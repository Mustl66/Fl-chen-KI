import matplotlib.pyplot as plt
from itertools import product

# Platten-Daten
plate_data = [
    ("A", (1.2, 0.5)),
    ("B", (1.0, 0.3)),
    ("C", (0.6, 0.25)),
    ("D", (0.3, 0.25)),
]

# Fläche
large_area = (88.14, 18.5)  # A=10, B=5


def rotate_plate(plate):
    """Rotiert die Platte (Breite und Höhe tauschen)."""
    return plate[0], (plate[1][1], plate[1][0])


def calculate_fit(large_area, plate_data):
    """Berechnet die beste Anordnung von Platten in einer großen Fläche ohne Überlappung."""
    large_width, large_height = large_area
    best_combination = []
    max_area_covered = 0

    for rotated_plates in product([False, True], repeat=len(plate_data)):
        rotated_plate_data = [
            rotate_plate(plate) if rotated else plate
            for plate, rotated in zip(plate_data, rotated_plates)
        ]
        current_combination = []
        current_area_covered = 0
        occupied_positions = set()

        for plate_name, (plate_width, plate_height) in rotated_plate_data:
            for x in range(int(large_width // plate_width)):
                for y in range(int(large_height // plate_height)):
                    # Check if this position is free
                    position = (x * plate_width, y * plate_height)
                    if not any(
                        px < position[0] + plate_width and
                        px + pw > position[0] and
                        py < position[1] + plate_height and
                        py + ph > position[1]
                        for (px, py, pw, ph) in occupied_positions
                    ):
                        # Add plate to this position
                        occupied_positions.add((position[0], position[1], plate_width, plate_height))
                        current_combination.append((plate_name, position[0], position[1], plate_width, plate_height))
                        current_area_covered += plate_width * plate_height

        if current_area_covered > max_area_covered:
            max_area_covered = current_area_covered
            best_combination = current_combination

    return best_combination, max_area_covered


def plot_combination(large_area, combination):
    """Visualisiert die beste Kombination von Platten in der großen Fläche."""
    fig, ax = plt.subplots()
    large_width, large_height = large_area
    ax.set_xlim(0, large_width)
    ax.set_ylim(0, large_height)
    ax.set_aspect('equal')

    colors = ['red', 'blue', 'green', 'yellow']
    for i, (plate_name, x, y, plate_width, plate_height) in enumerate(combination):
        rect = plt.Rectangle((x, y), plate_width, plate_height, color=colors[i % len(colors)], alpha=0.5)
        ax.add_patch(rect)
        ax.text(x + plate_width / 2, y + plate_height / 2, plate_name, color='black', ha='center', va='center')

    plt.title("Beste Plattenanordnung")
    plt.xlabel("Breite")
    plt.ylabel("Höhe")
    plt.show()

# Berechnung der besten Kombination
best_combination, max_area_covered = calculate_fit(large_area, plate_data)
print("Beste Kombination:", best_combination)
print("Maximale bedeckte Fläche:", max_area_covered)

# Visualisierung
plot_combination(large_area, best_combination)
