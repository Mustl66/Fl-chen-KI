import plotly.graph_objects as go
from itertools import product
from collections import Counter
import math

# Platten-Daten
plate_data = [
    ("A", (1.2, 0.5)),
    ("B", (1.0, 0.3)),
    ("C", (0.6, 0.25)),
    ("D", (0.3, 0.25)),
]

# Fläche
large_area = (18.15, 15.5)


def rotate_plate(plate):
    """Rotiert die Platte (Breite und Höhe tauschen)."""
    return plate[0], (plate[1][1], plate[1][0])


def calculate_fit(large_area, plate_data):
    """Berechnet die beste Anordnung von Platten in einer großen Fläche ohne Überlappung und minimiert leere Spalten."""
    large_width, large_height = large_area
    best_combination = []
    max_area_covered = 0

    # Berechnung parallelisieren
    all_combinations = list(product([False, True], repeat=len(plate_data)))

    for rotated_plates in all_combinations:
        rotated_plate_data = [
            rotate_plate(plate) if rotated else plate
            for plate, rotated in zip(plate_data, rotated_plates)
        ]
        current_combination = []
        current_area_covered = 0
        occupied_positions = set()

        # Versuche, die Platten zuerst an den Rändern anzulegen
        x_start, y_start = 0, 0
        for plate_name, (plate_width, plate_height) in rotated_plate_data:
            # Platten entlang der Ränder platzieren
            for x in range(math.ceil(large_width // plate_width) + 1):
                for y in range(math.ceil(large_height // plate_height) + 1):
                    # Position überprüfen
                    position = (x * plate_width, y * plate_height)
                    if position[0] + plate_width <= large_width and position[1] + plate_height <= large_height:
                        if not any(
                                px < position[0] + plate_width and
                                px + pw > position[0] and
                                py < position[1] + plate_height and
                                py + ph > position[1]
                                for (px, py, pw, ph) in occupied_positions
                        ):
                            # Platte hinzufügen
                            occupied_positions.add((position[0], position[1], plate_width, plate_height))
                            current_combination.append(
                                (plate_name, position[0], position[1], plate_width, plate_height))
                            current_area_covered += plate_width * plate_height

        if current_area_covered > max_area_covered:
            max_area_covered = current_area_covered
            best_combination = current_combination

    return best_combination, max_area_covered


def plot_combination(large_area, combination):
    """Visualisiert die beste Kombination von Platten in der großen Fläche."""
    fig = go.Figure()

    # Farben für die Platten
    colors = ['#4e73df', '#1cc88a', '#36b9cc', '#f6c23e']
    for i, (plate_name, x, y, plate_width, plate_height) in enumerate(combination):
        # Hinzufügen der Platten
        fig.add_trace(go.Scatter(
            x=[x, x + plate_width, x + plate_width, x],
            y=[y, y, y + plate_height, y + plate_height],
            fill="toself",
            fillcolor=colors[i % len(colors)],
            line=dict(color="black", width=2),
            name=plate_name,
            text=plate_name,
            hoverinfo="text",
            showlegend=False
        ))

        # Hinzufügen der Bezeichnung innerhalb der Platte
        fig.add_trace(go.Scatter(
            x=[x + plate_width / 2],
            y=[y + plate_height / 2],
            text=[plate_name],
            mode='text',
            showlegend=False,
            textfont=dict(size=18, color="black")
        ))

    # Hinzufügen der roten Umrandung der großen Fläche
    fig.add_trace(go.Scatter(
        x=[0, large_area[0], large_area[0], 0, 0],
        y=[0, 0, large_area[1], large_area[1], 0],
        fill="none",
        line=dict(color="red", width=4),
        name="Große Fläche Umrandung",
        showlegend=False
    ))

    # Setze Layout für den Plot
    fig.update_layout(
        title="Optimale Plattenanordnung",
        title_x=0.5,
        title_font=dict(size=24, color="black", family="Arial"),
        xaxis=dict(
            range=[0, large_area[0]],
            showgrid=False,
            zeroline=False,
            title="Breite (m)",
            title_font=dict(size=16, family="Arial")
        ),
        yaxis=dict(
            range=[0, large_area[1]],
            showgrid=False,
            zeroline=False,
            title="Höhe (m)",
            title_font=dict(size=16, family="Arial")
        ),
        plot_bgcolor="#f4f7fb",  # Modernes, klares Grau
        paper_bgcolor="#f4f7fb",
        showlegend=True,
    )

    # Zeige die Visualisierung
    fig.show()


# Berechnung der besten Kombination
best_combination, max_area_covered = calculate_fit(large_area, plate_data)
print("Beste Kombination:", best_combination)

# Zähle, wie viele Platten jeder Art verwendet wurden
plate_counts = Counter(plate_name for plate_name, _, _, _, _ in best_combination)
print("Verwendete Plattenarten:")
for plate_name, count in plate_counts.items():
    print(f"{plate_name}: {count} Stück")

# Berechnung des Prozentsatzes der abgedeckten Fläche
large_area_size = large_area[0] * large_area[1]
coverage_percentage = (max_area_covered / large_area_size) * 100
print(f"Abgedeckte Fläche: {coverage_percentage:.2f}%")

# Visualisierung
plot_combination(large_area, best_combination)
