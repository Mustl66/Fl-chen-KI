import plotly.graph_objects as go
from plotly.subplots import make_subplots
import math

# Gemeinsame Konfiguration
plate_data = [
    ("A", (1.2, 0.5)),
    ("B", (1.0, 0.3)),
    ("C", (0.6, 0.25)),
    ("D", (0.3, 0.25)),
]
large_area = (3, 3)  # Standardisiert für beide Methoden

def overlaps(x, y, w, h, placed):
    for (_, px, py, pw, ph) in placed:
        if not (x + w <= px or x >= px + pw or y + h <= py or y >= py + ph):
            return True
    return False

def pack_with_priority(large_area, plates):
    """Packen mit Größenpriorisierung (absteigend sortiert)"""
    sorted_plates = sorted(plates, key=lambda p: p[1][0]*p[1][1], reverse=True)
    return pack(large_area, sorted_plates)

def pack_without_priority(large_area, plates):
    """Packen ohne Priorisierung (aufsteigend sortiert)"""
    sorted_plates = sorted(plates, key=lambda p: p[1][0]*p[1][1])
    return pack(large_area, sorted_plates)

def pack(large_area, plate_data):
    """Generische Packfunktion"""
    lw, lh = large_area
    placed = []
    candidates = [(0, 0)]
    
    while candidates:
        best = None
        for cx, cy in candidates:
            for plate in plate_data:
                for rotated in [False, True]:
                    name, (w, h) = plate if not rotated else (plate[0], (plate[1][1], plate[1][0]))
                    if cx + w <= lw and cy + h <= lh and not overlaps(cx, cy, w, h, placed):
                        if not best or (cy + h < best[2] + best[4]) or (cy + h == best[2] + best[4] and cx < best[1]):
                            best = (name, cx, cy, w, h)
        
        if not best:
            break
            
        placed.append(best)
        cx, cy = best[1], best[2]
        candidates = [
            (cx + best[3], cy),
            (cx, cy + best[4]),
            *[c for c in candidates if c != (cx, cy)]
        ]
        candidates = [c for c in candidates if not any(
            c[0] >= p[1] and c[0] < p[1] + p[3] and
            c[1] >= p[2] and c[1] < p[2] + p[4] for p in placed
        )]
        candidates.sort(key=lambda c: (c[1], c[0]))
    
    return placed

# Berechnungen für beide Strategien
results = {
    "Mit Priorisierung": pack_with_priority(large_area, plate_data),
    "Ohne Priorisierung": pack_without_priority(large_area, plate_data)
}

# Flächenberechnung und Ausgabe
total_area = large_area[0] * large_area[1]
for strategy, plates in results.items():
    coverage = sum(w*h for (_, _, _, w, h) in plates) / total_area * 100
    print(f"{strategy}: {coverage:.2f}% Abdeckung")

# Visualisierung
fig = make_subplots(rows=1, cols=2, subplot_titles=[
    f"Mit Priorisierung ({sum(w*h for (_,_,_,w,h) in results['Mit Priorisierung'])/total_area*100:.2f}%)",
    f"Ohne Priorisierung ({sum(w*h for (_,_,_,w,h) in results['Ohne Priorisierung'])/total_area*100:.2f}%)"
])

colors = ['#4e73df', '#1cc88a', '#36b9cc', '#f6c23e']
for col, (strategy, plates) in enumerate(results.items(), 1):
    for i, (name, x, y, w, h) in enumerate(plates):
        fig.add_trace(go.Scatter(
            x=[x, x+w, x+w, x, x],
            y=[y, y, y+h, y+h, y],
            fill="toself",
            fillcolor=colors[i % len(colors)],
            line=dict(color="black", width=1),
            showlegend=False
        ), row=1, col=col)
        
    fig.add_trace(go.Scatter(
        x=[0, large_area[0], large_area[0], 0, 0],
        y=[0, 0, large_area[1], large_area[1], 0],
        fill="none",
        line=dict(color="red", width=3),
        showlegend=False
    ), row=1, col=col)

fig.update_layout(
    height=600,
    width=1200,
    plot_bgcolor="#f4f7fb",
    paper_bgcolor="#f4f7fb",
    margin=dict(l=20, r=20, t=40, b=20)
)
fig.show()
